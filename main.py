import concurrent.futures
from modules.sql_injection import check_sql_injection
from modules.xss import check_xss
from modules.directory_listing import check_directory_listing
from modules.insecure_headers import check_insecure_headers
from modules.open_ports import check_open_ports
from modules.csrf import check_csrf
from modules.logging import log_vulnerability
from modules.reporting import generate_report
from modules.auth import authenticate
from modules.user_agent import get_random_user_agent
from modules.database import init_db, save_vulnerability

def scan_url(url, session):
    vulnerabilities = []
    headers = {'User-Agent': get_random_user_agent()}
    try:
        sql_vulns = check_sql_injection(url, headers, session)
        xss_vulns = check_xss(url, headers, session)
        dir_vulns = check_directory_listing(url, headers, session)
        hdr_vulns = check_insecure_headers(url, headers, session)
        csrf_vulns = check_csrf(url, headers, session)
        all_vulns = sql_vulns + xss_vulns + dir_vulns + hdr_vulns + csrf_vulns
        vulnerabilities.extend(all_vulns)

        for vuln in all_vulns:
            log_vulnerability(vuln.split(" ")[1], url, vuln)
            save_vulnerability(url, vuln.split(" ")[1], vuln)
    except Exception as e:
        print(f"Error scanning {url}: {e}")
    return vulnerabilities

def main():
    init_db()
    urls = ["http://example.com", "http://testsite.com"]
    all_vulnerabilities = []

    session = authenticate("http://example.com", "admin", "password")
    if not session:
        return

    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        future_to_url = {executor.submit(scan_url, url, session): url for url in urls}
        for future in concurrent.futures.as_completed(future_to_url):
            url = future_to_url[future]
            try:
                vulnerabilities = future.result()
                all_vulnerabilities.extend(vulnerabilities)
            except Exception as e:
                print(f"Error scanning {url}: {e}")

    generate_report(all_vulnerabilities)

if __name__ == "__main__":
    main()



